{"version":3,"sources":["webpack:///../src/docs/Api/Installation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAQaA,G,UAAe,S,+MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,mDAAkC,6BAAGC,WAAW,KAAQ,CACpD,KAAQ,mCADsB,iBAAlC,oEAE+F,6BAAGA,WAAW,KAAQ,CACjH,KAAQ,kEADmF,6BAF/F,OAKA,iBAAQ,CACN,GAAM,oBADR,yBAGA,0EACA,sBACE,kBAAIA,WAAW,MAAf,uBAA4C,6BAAGA,WAAW,MAAS,CAC/D,KAAQ,kEADgC,QAA5C,aAIF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+HAML,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,iCAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yHAML,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,iBACA,iBAAGA,WAAW,MAAd,wGAGF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,iCAGJ,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4GAIL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,2BAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+CAIL,4DACA,iBAAQ,CACN,GAAM,cADR,cAGA,sIACA,2BAAS,yDAAT,kEAaA,2BAAS,mDACP,uHACA,sBACE,kBAAIA,WAAW,MAAf,UAA+B,kBAAIA,WAAW,MAAf,eAA/B,WAAmF,kBAAIA,WAAW,MAAf,UAAnF,SACA,kBAAIA,WAAW,MAAf,UAA+B,kBAAIA,WAAW,MAAf,SAC/B,kBAAIA,WAAW,MAAf,UAA+B,kBAAIA,WAAW,MAAf,cAA/B,wBACA,kBAAIA,WAAW,MAAf,UAA+B,kBAAIA,WAAW,MAAf,cAC/B,kBAAIA,WAAW,MAAf,cAAmC,kBAAIA,WAAW,MAAf,aAAnC,WACA,kBAAIA,WAAW,MAAf,gFAAqG,0BAAYA,WAAW,MAAvB,oEACrG,kBAAIA,WAAW,MAAf,UAA+B,kBAAIA,WAAW,MAAf,SAC/B,kBAAIA,WAAW,MAAf,qJAA0K,kBAAIA,WAAW,MAAf,0CAA1K,uDAAqS,kBAAIA,WAAW,MAAf,gBAArS,0BAAyW,kBAAIA,WAAW,MAAf,MAAzW,oCAA6a,kBAAIA,WAAW,MAAf,oCAA7a,8BAAygB,kBAAIA,WAAW,MAAf,mBAAzgB,KACA,kBAAIA,WAAW,MAAf,eAAoC,kBAAIA,WAAW,MAAf,cAApC,sBAAkG,kBAAIA,WAAW,MAAf,qBAClG,kBAAIA,WAAW,MAAf,UAA+B,kBAAIA,WAAW,MAAf,cAC/B,kBAAIA,WAAW,MAAf,gFAAqG,0BAAYA,WAAW,MAAvB,mDACrG,kBAAIA,WAAW,MAAf,UAA+B,kBAAIA,WAAW,MAAf,SAC/B,kBAAIA,WAAW,MAAf,iKAAsL,kBAAIA,WAAW,MAAf,mD,6MAO9LJ,EAAWK,gBAAiB","file":"component---src-docs-api-installation-mdx-8796e69332c6ddead513.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/alex.pezzini/Documents/PROGETTI/OPENHOSPITAL/OPENHOSPITAL_DEVELOPER_PORTAL/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"open-hospital-api\"\n    }}>{`Open Hospital API`}</h1>\n    <p>{`This is the API project of `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.open-hospital.org/\"\n      }}>{`Open Hospital`}</a>{`: it exposes a REST API of the business logic implemented in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/informatici/openhospital/openhospital-core\"\n      }}>{`openhospital-core project`}</a>{`.  `}</p>\n    <h2 {...{\n      \"id\": \"how-to-build-wip\"\n    }}>{`How to build `}{`[WIP]`}</h2>\n    <p>{`For the moment, to build this project you should `}</p>\n    <ol>\n      <li parentName=\"ol\">{`fetch and build the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/informatici/openhospital/openhospital-core\"\n        }}>{`core`}</a>{` project`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`git clone https://github.com/informatici/openhospital-core.git\ncd openhospital-core\nmvn clean install -DskipTests=true\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`clone and build this project`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`git clone https://github.com/informatici/openhospital-api\ncd openhospital-api\nmvn clean install -DskipTests=true\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`call services`}</p>\n        <p parentName=\"li\">{`URL base: localhost:8080/oh-api/patients\nURL swagger: http://localhost:8080/oh-api/swagger-ui.html`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`set rsc/database.properties`}</p>\n      </li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`DB can be created with \\`docker-compose up\\` from \\`openhospital-core\\` or using a dedicated MySQL server\n`}</code></pre>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`start openhospital-api`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`java -jar openhospital-api-<version>.jar\n`}</code></pre>\n    <p>{`Service available on localhost:8080`}</p>\n    <h2 {...{\n      \"id\": \"code-style\"\n    }}>{`Code style`}</h2>\n    <p>{`This project uses a consistent code style and provides definitions for use in both IntelliJ and Eclipse IDEs.`}</p>\n    <details><summary>IntelliJ IDEA instructions</summary>\nFor IntelliJ IDEA the process for importing the code style is:\n\n\n\n\n\n\n\n\n\n\n    </details>\n    <details><summary>Eclipse instructions</summary>\n      <p>{`For Eclipse the process requires loading the formatting style and the import order separately.`}</p>\n      <ul>\n        <li parentName=\"ul\">{`Select `}<em parentName=\"li\">{`Preferences`}</em>{` in the `}<em parentName=\"li\">{`Window`}</em>{` menu`}</li>\n        <li parentName=\"ul\">{`Select `}<em parentName=\"li\">{`Java`}</em></li>\n        <li parentName=\"ul\">{`Select `}<em parentName=\"li\">{`Code Style`}</em>{` and expand the menu`}</li>\n        <li parentName=\"ul\">{`Select `}<em parentName=\"li\">{`Formatter`}</em></li>\n        <li parentName=\"ul\">{`Select the `}<em parentName=\"li\">{`Import...`}</em>{` button`}</li>\n        <li parentName=\"ul\">{`Navigate to the location of the file which relative to the project root is:  `}<inlineCode parentName=\"li\">{`.ide-settings/eclipse/OpenHospital-Java-CodeStyle-Formatter.xml`}</inlineCode></li>\n        <li parentName=\"ul\">{`Select `}<em parentName=\"li\">{`Open`}</em></li>\n        <li parentName=\"ul\">{`At this point the code style is stored and is applicable to all projects opened in the IDE.  To restrict the settings just to this project select `}<em parentName=\"li\">{`Configure Project Specific Settings...`}</em>{` in the upper right.  In the next dialog select the `}<em parentName=\"li\">{`openhospital`}</em>{` repository and select `}<em parentName=\"li\">{`OK`}</em>{`.  In the next dialog select the `}<em parentName=\"li\">{`Enable project specific settings`}</em>{` checkbox.  Finally select `}<em parentName=\"li\">{`Apply and Close`}</em>{`.`}</li>\n        <li parentName=\"ul\">{`Back in the `}<em parentName=\"li\">{`Code Style`}</em>{` menu area, select `}<em parentName=\"li\">{`Organize Imports`}</em></li>\n        <li parentName=\"ul\">{`Select `}<em parentName=\"li\">{`Import...`}</em></li>\n        <li parentName=\"ul\">{`Navigate to the location of the file which relative to the project root is:  `}<inlineCode parentName=\"li\">{`.ide-settings/eclipse/OpenHospital.importorder`}</inlineCode></li>\n        <li parentName=\"ul\">{`Select `}<em parentName=\"li\">{`Open`}</em></li>\n        <li parentName=\"ul\">{`As with the formatting styles the import order is applicable to all projects.  In order to change it just for this project repeat the same steps as above for `}<em parentName=\"li\">{`Configure Project Specific Settings...`}</em></li>\n      </ul>\n    </details> \n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}